# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
pip-wheel-metadata/

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/source/.doctrees/
docs/source/_build/
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/

# Jetbrains
.idea/

# pytest
.pytest_cache

# Pipfile & Pipfile.lock
#
# When developing libraries, it is generally recommended to exclude
# Pipfile and Pipfile.lock from version control [1]. Notably, including
# Pipfile in the repo is fine when it is used to specify development
# dependencies (e.g., tox), as long as the file does not repeat abstract
# dependencies that are already defined within setup.py [2].
#
# [1]: https://github.com/pypa/pipenv/issues/1911#issuecomment-379422008
# [2]: https://docs.pipenv.org/advanced/#pipfile-vs-setup-py
#
Pipfile.lock

# macOS
.DS_Store

# VS Code
.vscode/
